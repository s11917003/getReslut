package result

import (
	"encoding/json"
	"fmt"
	betcollect "getReslut/betCollect"
	"getReslut/betCount"
	"getReslut/config"
	"io/ioutil"
	"math/rand"
	"os"
	"reflect"
	"strconv"
	"strings"
	"time"

	"github.com/seehuhn/mt19937"
)

func Run(betOrdersData map[string]interface{}, thisRatioData float64, thisLotteryTypeGroupData string, thisLotteryTypeData string, thisLotteryIssueData string) bool {

	rng := rand.New(mt19937.New())
	rng.Seed(time.Now().UnixNano())

	// thisDigit := 4
	// thisRound := 4
	thisRatio := 0.0            //該注單賠率
	thisOdds := 0.0             //可使用的賠率array
	var thisPrize float64 = 0.0 //獎金
	thisDrawn := 0.0            //退回
	thisWinnings := 0.0         //預設單注獎金
	// thisLotteryWinningLimit := 0

	AllBOBetCount := 0  //總注數
	AllPrize := 0.0     //總贏錢
	AllRealPrice := 0.0 //總下注

	AllOddsPrizeCountList := [6]float64{0, 0, 0, 0, 0, 0} //1~2倍、2~5倍、5~10倍、11~20倍、20~100倍、100倍
	AllPrizeCountList := [6]float64{0, 0, 0, 0, 0, 0}     //1~2倍、2~5倍、5~10倍、11~20倍、20~100倍、100倍

	targetRatio := 0.96 //目標殺率
	// isWrongOpenResult := true //取得正確開獎數字
	resultcount := 0
	thisState := 0
	thisOpenResult := ""
	errorCode := 0
	thisLottteryTypeGroup := 0
	thisLotteryType := 0

	fmt.Println("errorCode ", errorCode)
	fmt.Println("targetRatio ", targetRatio)

	//單機測試
	jsonFile, err := os.Open("config/test.json") //讀取json檔案
	var boData map[string]interface{}
	if err != nil { //讀取檔案錯誤
		fmt.Println(err)
	} else {
		defer jsonFile.Close()                     //關閉檔案流
		byteValue, _ := ioutil.ReadAll(jsonFile)   //json string轉為byte
		json.Unmarshal([]byte(byteValue), &boData) //json轉為map
	}

	if boData["status"].(bool) {
		if thisRatioData > 0 { //殺率
			targetRatio = thisRatioData
		} else {
			targetRatio = 0
			thisState = -1
			errorCode = 1
		}

		if boData["LTG"].(string) != "" {
			if lottteryTypeGroup, err := strconv.Atoi(thisLotteryTypeGroupData); err == nil {
				thisLottteryTypeGroup = lottteryTypeGroup
			} else {
				thisState = -1
				errorCode = 1
			}
		} else {
			thisLottteryTypeGroup = 0
			thisState = -1
			errorCode = 1
		}

		if boData["LT"].(string) != "" {
			if lotteryType, err := strconv.Atoi(thisLotteryTypeData); err == nil {
				thisLotteryType = lotteryType
			} else {
				thisState = -1
				errorCode = 1
			}
		} else {
			thisLotteryType = 0
			thisState = -1
			errorCode = 1
		}

		config.Init(thisLottteryTypeGroup, thisLotteryType)

		thisLotteryConfig := config.ConfigData
		fmt.Println("map:", thisLotteryConfig["LTR_Config"].(map[string]interface{})["LTR_ContentType"].(map[string]interface{})["1"].(map[string]interface{})["1"].(map[string]interface{})["PGN"])

		if (boData["BO"].(interface{}) != nil) && thisState != -1 {

			// for {
			resultcount++
			cont := 5
			AllPrize = 0     //總贏錢
			AllRealPrice = 0 //總下注
			AllBOBetCount = 0
			AllOddsPrizeCountList = [6]float64{0, 0, 0, 0, 0, 0}
			AllPrizeCountList = [6]float64{0, 0, 0, 0, 0, 0}

			for i := 0; i < cont; i++ {
				//number := strconv.Itoa(rand.Intn(10)) //亂數產生

				number := strconv.Itoa(rng.Intn(10))
				fmt.Println("	rng.Intn(10)", rng.Intn(10))

				if i == (cont - 1) {
					thisOpenResult += number
				} else {
					thisOpenResult += (number + ",") //資料整合
				}
			}
			thisOpenResult = "1,1,1,3,4"
			thisOpenResult1 := strings.Split(thisOpenResult, ",")

			//從規則參數中，取得對獎結果記錄格式 (從 PlayRule 取得空預設值，或從資料庫取出目前值)
			thisFullResult := thisLotteryConfig["LTR_ResultFormat"].(map[string]interface{})

			if betOrdersData["count"] <= 0 {
				thisState = -1
				errorCode = 1
			}
			if betOrdersData["count"] <= 0 {

			}
			//*fmt.Println("thisFullResult  ====:", thisFullResult)

			//config.ReplaceRealResult(thisLottteryTypeGroup,thisLotteryType)
			//從規則參數中，取得對獎所需的各項參數
			thisConfig := thisLotteryConfig["LTR_Config"].(map[string]interface{})

			thisFullResult = config.ReplaceRealResult(thisLottteryTypeGroup, thisLotteryType, thisOpenResult1, nil, nil, thisFullResult, thisConfig)
			//fmt.Println("thisFullResult :", thisFullResult)
			// betOrder := data["BO"].(interface{})

			betOrders := boData["BO"].(map[string]interface{})
			for _, v := range betOrders {
				data := v.(map[string]interface{})
				thisLotteryPlayMode := 0

				if data["LPM"].(string) != "" {
					if lotteryPlayMode, err := strconv.Atoi(data["LPM"].(string)); err == nil {
						thisLotteryPlayMode = lotteryPlayMode
					} else {
						thisState = -1
						errorCode = 1
					}
				} else {
					thisLotteryPlayMode = 0
					thisState = -1
					errorCode = 1

				}

				fmt.Println("betOrder  thisLotteryPlayMode =  ", thisLotteryPlayMode)
				fmt.Println("betOrders => ", data["betOrderList"].([]interface{}))
				fmt.Println("betOrders => len", len(data["betOrderList"].([]interface{})))
				if data["betOrderList"] != nil {
					for _, element := range data["betOrderList"].([]interface{}) {
						_element := element.(map[string]interface{})
						// thisLotteryPlayGroup := _element["LPG"].(string)

						// fmt.Println("_element ", thisLotteryPlayGroup)
						//for _, _ := range _element.(map[string]interface{}) {

						// thisRatio := 0
						// thisOdds := 0
						thisPrize = 0.0
						// thisDrawn := 0

						thisLotteryPlayGroup := 0
						thisLotteryPlay := 0
						// thisOpenResult2 := []int{}
						var thisBOContent interface{}
						thisBOPrice := 0.0
						thisBOUnit := 0
						thisBOMultiple := 0.0
						thisBOOdds1 := 0.0
						thisBOOdds2 := 0.0
						thisBOOdds3 := 0.0

						if _element["BC"].(interface{}) != "" {

							thisBOContent = _element["BC"]
							fmt.Println("BC TypeOf  =  ", reflect.TypeOf(thisBOContent))
							fmt.Println("BC ", thisBOContent)

							fmt.Println("BC ", _element["BC"])
						} else {

							thisState = -1
							errorCode = 1
						}
						fmt.Println("thisBOContent ", thisBOContent)
						if _element["LPG"].(string) != "" {
							if lotteryPlayGroup, err := strconv.Atoi(_element["LPG"].(string)); err == nil {
								thisLotteryPlayGroup = lotteryPlayGroup
								fmt.Println("if ")
							} else {
								thisState = -1
								errorCode = 1
								fmt.Println("else ")
							}
						} else {
							thisLotteryPlayGroup = 0
							thisState = -1
							errorCode = 1
						}

						fmt.Println("thisLotteryPlayGroup ", thisLotteryPlayGroup)

						if _element["LP"].(string) != "" {
							if lotteryPlay, err := strconv.Atoi(_element["LP"].(string)); err == nil {
								thisLotteryPlay = lotteryPlay

							} else {
								thisState = -1
								errorCode = 1
							}
						} else {
							thisBOPrice = 0
							thisState = -1
							errorCode = 1
						}
						fmt.Println("thisLotteryPlay ====>", thisLotteryPlay)

						if _element["BP"].(string) != "" {
							if BOPrice, err := strconv.ParseFloat(_element["BP"].(string), 64); err == nil {
								thisBOPrice = BOPrice
							} else {
								thisState = -1
								errorCode = 1
							}
						} else {
							thisBOPrice = 0
							thisState = -1
							errorCode = 1
						}
						fmt.Println("thisBOPrice ", thisBOPrice)

						if _element["BU"].(string) != "" {
							if BOUnit, err := strconv.Atoi(_element["BU"].(string)); err == nil {
								thisBOUnit = BOUnit
							} else {
								thisState = -1
								errorCode = 1
							}
						} else {
							thisBOUnit = 0
							thisState = -1
							errorCode = 1
						}
						fmt.Println("thisBOUnit ", thisBOUnit)

						if _element["BM"].(string) != "" {
							if BOMultiple, err := strconv.ParseFloat(_element["BM"].(string), 64); err == nil {
								thisBOMultiple = BOMultiple
							} else {
								thisState = -1
								errorCode = 1
							}
						} else {
							thisBOMultiple = 0
							thisState = -1
							errorCode = 1
						}
						fmt.Println("thisBOMultiple ", thisBOMultiple)
						fmt.Println("thisBOMultiple ", _element["BO1"])
						if _element["BO1"].(string) != "" {
							if BOOdds1, err := strconv.ParseFloat(_element["BO1"].(string), 64); err == nil {
								fmt.Println("BOOdds1 ", BOOdds1)
								thisBOOdds1 = BOOdds1
							} else {
								fmt.Println("BOOdds1   QQQ ", BOOdds1)
								thisState = -1
								errorCode = 1
							}
						} else {
							thisBOOdds1 = 0
							thisState = -1
							errorCode = 1
						}
						fmt.Println("thisBOOdds1 ", thisBOOdds1)

						if _element["BO2"].(string) != "" {
							if BOOdds2, err := strconv.ParseFloat(_element["BO2"].(string), 64); err == nil {
								thisBOOdds2 = BOOdds2
							} else {
								thisState = -1
								errorCode = 1
							}
						} else {
							thisBOOdds2 = 0
							thisState = -1
							errorCode = 1
						}
						fmt.Println("thisBOOdds2 ", thisBOOdds2)

						if _element["BO3"].(string) != "" {
							if BOOdds3, err := strconv.ParseFloat(_element["BO3"].(string), 64); err == nil {
								thisBOOdds3 = BOOdds3
							} else {
								thisState = -1
								errorCode = 1
							}
						} else {
							thisBOOdds3 = 0
							thisState = -1
							errorCode = 1
						}
						fmt.Println("thisBOOdds3 ", thisBOOdds3)
						fmt.Println("thisLottteryTypeGroup ", thisLottteryTypeGroup)
						fmt.Println("thisLotteryType ", thisLotteryType)
						fmt.Println("thisLotteryPlayMode ", thisLotteryPlayMode)
						fmt.Println("thisLotteryPlayGroup ", thisLotteryPlayGroup)
						fmt.Println("thisLotteryPlay ", thisLotteryPlay)

						fmt.Println("thisBOContent before ", thisBOContent)
						//fmt.Println("ReplaceRealContent ===>", config.ReplaceRealContent(thisLottteryTypeGroup, thisLotteryType, "Test_Issue", thisLotteryConfig, thisLotteryPlayMode, thisLotteryPlayGroup, thisLotteryPlay, thisBOContent))

						thisBOContent = config.ReplaceRealContent(thisLottteryTypeGroup, thisLotteryType, "Test_Issue", thisLotteryConfig, thisLotteryPlayMode, thisLotteryPlayGroup, thisLotteryPlay, thisBOContent)
						fmt.Println("thisBOContent after ", thisBOContent)
						newContent := make(map[string]interface{})
						newContent["1"] = make(map[string]interface{})
						newContent["1"] = thisBOContent
						//注數計算
						thisBOBetCount := 0
						if thisLotteryPlayMode == 2 {
							//	thisBOBetCount = 1

							thisBOBetCount = betCount.BetCountOfficial(thisLottteryTypeGroup, thisLotteryPlayGroup, thisLotteryPlay, newContent)
							//
						} else {
							thisBOBetCount = 1
						}

						thisBORealPrice := float64(thisBOPrice) * float64(thisBOBetCount) * thisBOMultiple
						AllBOBetCount += thisBOBetCount

						fmt.Println("thisBOContent    after  ", thisBOContent)
						fmt.Println("thisBOBetCount      ", thisBOBetCount)
						fmt.Println("thisBORealPrice       ", thisBORealPrice)
						thisBOMode := thisLotteryPlayMode
						thisBOPriceNew := thisBOPrice
						thisBOWinningLimit := 0
						fmt.Println("thisBOMode       ", thisBOMode)
						fmt.Println("thisBOWinningLimit       ", thisBOPriceNew)
						fmt.Println("thisBOWinnings3       ", thisBOWinningLimit)

						fmt.Println("thisBOOdds1       ", thisBOOdds1)
						fmt.Println("thisBOOdds2       ", thisBOOdds2)
						fmt.Println("thisBOOdds3       ", thisBOOdds3)

						thisBOWinnings1 := float64(thisBOPriceNew) * float64(thisBOMultiple) * thisBOOdds1
						thisBOWinnings2 := float64(thisBOPriceNew) * float64(thisBOMultiple) * thisBOOdds2
						thisBOWinnings3 := float64(thisBOPriceNew) * float64(thisBOMultiple) * thisBOOdds3
						fmt.Println("thisBOWinnings1       ", float64(thisBOPriceNew)*float64(thisBOMultiple)*thisBOOdds1)
						fmt.Println("thisBOWinnings2       ", float64(thisBOPriceNew)*float64(thisBOMultiple)*thisBOOdds2)
						fmt.Println("thisBOWinnings3       ", float64(thisBOPriceNew)*float64(thisBOMultiple)*thisBOOdds3)

						//對獎
						checkWinning := betcollect.CheckWinnings(thisLottteryTypeGroup, thisLotteryType, thisLotteryPlayMode, thisLotteryPlayGroup, thisLotteryPlay, thisBOContent, thisFullResult, thisConfig)

						println(" str_data  ", thisOpenResult)
						fmt.Println("checkWinning       ", checkWinning)
						//單位換算
						// thisBOUnit = 1
						if thisBOUnit == 1 {
							fmt.Println("thisBOUnit   !!!! 1         ", thisBOUnit)
							thisBORealPrice = thisBORealPrice / 100
							thisBOPrice = thisBOPrice / 100
							thisBOPriceNew = thisBOPriceNew / 100
							thisPrize = thisPrize / 100
						} else if thisBOUnit == 2 {
							fmt.Println("thisBOUnit   !!!! 2         ", thisBOUnit)
							thisBORealPrice = thisBORealPrice / 10
							thisBOPrice = thisBOPrice / 10
							thisBOPriceNew = thisBOPriceNew / 10
							thisPrize = thisPrize / 10

						}

						AllRealPrice += thisBORealPrice

						fmt.Println("thisBORealPrice       ", thisBORealPrice)
						fmt.Println("thisBOPrice        ", thisBOPrice)
						fmt.Println("thisBOPriceNew       ", thisBOPriceNew)
						fmt.Println("thisPrize         ", thisPrize)
						fmt.Println("thisBOMode       ", thisBOMode)
						// thisCheckWinnings := make(map[string]interface{})
						// thisCheckWinnings["Message"] = 0
						// thisCheckWinnings["Ratio"] = 0
						//取得是否中獎 (0:沒中獎|1:中獎|2:和局退本金)

						thisState = checkWinning["Message"].(int)

						//取得中獎的注數 (0:沒中獎)
						thisRatioList := checkWinning["Ratio"].([]float64)
						thisRatioCalc := len(checkWinning["Ratio"].([]float64))

						fmt.Println("thisRatioList       ", thisRatioList)
						fmt.Println("thisRatioCalc       ", thisRatioCalc)
						thisOddsList := []float64{thisBOOdds1, thisBOOdds2, thisBOOdds3}
						//thisOddsCalc := len(thisOddsList)
						fmt.Println("thisOddsList       ", thisOddsList)
						thisBOWinList := []float64{thisBOWinnings1, thisBOWinnings2, thisBOWinnings3}
						fmt.Println("thisBOWinList       ", thisBOWinList)

						switch thisState {
						//中獎
						case 1:
							{

								fmt.Println("//中獎       ")

								for iRatio := 0; iRatio < thisRatioCalc; iRatio++ {
									if thisRatioList[iRatio] > 0 {
										thisRatio = thisRatioList[iRatio]
										//依判斷結果轉換為正確的賠率
										if thisOddsList[iRatio] > 0 {
											thisOdds = thisOddsList[iRatio]
										} else {
											thisOdds = thisOddsList[0]
										}

										//依判斷結果轉換為正確的預設單注獎金
										if thisBOWinList[iRatio] > 0 {
											thisWinnings = thisBOWinList[iRatio]
										} else {
											thisWinnings = thisBOWinList[0]
										}
										// const f = math.MaxFloat64
										// fmt.Printf("%[1]T %[1]v\n", f)

										// fmt.Println(" thisPrize ", thisPrize)
										// fmt.Println(" thisWinnings == 195000) =>", thisWinnings == 195000)
										// fmt.Println(" thisRatio == 6 => ", thisRatio == 6)
										fmt.Printf("%v\n", true)

										println("total win：", fmt.Sprintf("%f", thisWinnings*thisRatio))
										// fmt.Println(" 195000*6  => ", 195000*6)
										a := thisRatio
										b := thisWinnings

										fmt.Println(" a*thisRatio => ", a, b, a*b, 195000*6)

										//計算獎金
										if thisBOMode == 2 && thisWinnings > 0 {

											thisPrize = thisPrize + thisWinnings*thisRatio
											fmt.Println(" 1 ")
										} else if thisBOMode == 1 && thisLotteryType == 7 && thisLotteryPlayGroup == 15 { //六合彩正肖玩法的特殊算法  未實做

										} else {
											fmt.Println("2 ")
											thisPrize = thisPrize + thisBOPriceNew*thisBOMultiple*thisOdds*thisRatio
										}

										//檢查獎金是否超過最大獎金限制  未做
										//  $this_Prize = ($this_BO_WinningLimit != 0 && $this_BO_WinningLimit < $this_Prize)?$this_BO_WinningLimit:$this_Prize;
										//  echo $this_Ratio." ".$this_Odds." ".$this_Winnings." ".$this_Prize."\n";

									}
								}

							}
							//和局退本金
						case 2:
							{
								thisPrize = 0
								thisDrawn = thisBORealPrice
								break
							}
							//2:和局退本金
						default:
							{
								thisPrize = 0
								thisDrawn = 0
								break
							}

						}

						AllPrize += thisPrize

						if thisState == 1 {
							CountIndex := 5
							switch {
							case thisOdds < 2:
								CountIndex = 0
								break
							case thisOdds < 5:
								CountIndex = 1
								break
							case thisOdds < 10:
								CountIndex = 2
								break
							case thisOdds < 20:
								CountIndex = 3
								break
							case thisOdds < 100:
								CountIndex = 4
								break
							default:
								CountIndex = 5
								break

							}

							AllOddsPrizeCountList[CountIndex] = AllOddsPrizeCountList[CountIndex] + 1
							AllPrizeCountList[CountIndex] = AllPrizeCountList[CountIndex] + thisPrize

						}

					}

				} else {
					errorCode = 1
				}

			}

		}
		// }
		fmt.Println("thisDrawn ", thisDrawn)

		fmt.Println("All_OddsPrizeCountList ", AllOddsPrizeCountList)

		fmt.Println("All_PrizeCountList ", AllPrizeCountList)

		fmt.Println("All_BO_BetCount ", AllBOBetCount)

		fmt.Println("All_Prize ", AllPrize)

		fmt.Println("All_RealPrice ", AllRealPrice)

		return true

	}
	return false
}

func print_map(m map[string]interface{}) {
	for k, v := range m {
		switch value := v.(type) {
		case nil:
			fmt.Println(k, "is nil", "null")
		case string:
			fmt.Println(k, "is string", value)
		case int:
			fmt.Println(k, "is int", value)
		case float64:
			fmt.Println(k, "is float64", value)
		case []interface{}:
			fmt.Println(k, "is an array:")
			for i, u := range value {
				fmt.Println(i, u)
			}
		case map[string]interface{}:
			fmt.Println(k, "is an map:")
			print_map(value)
		default:
			fmt.Println(k, "is unknown type", fmt.Sprintf("%T", v))
		}
	}
}
